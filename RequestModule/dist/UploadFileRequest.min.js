function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var UploadFileRequest =
/*#__PURE__*/
function () {
  //Ajax Http Request
  //Data To Send
  function UploadFileRequest(_ref) {
    var url = _ref.url,
        file = _ref.file,
        onSuccess = _ref.onSuccess,
        onProgress = _ref.onProgress,
        onError = _ref.onError,
        _ref$authentication = _ref.authentication,
        authentication = _ref$authentication === void 0 ? true : _ref$authentication,
        _ref$formKey = _ref.formKey,
        formKey = _ref$formKey === void 0 ? UploadFileRequest.defaults.formKey : _ref$formKey,
        _ref$AuthManagerBridg = _ref.AuthManagerBridge,
        AuthManagerBridge = _ref$AuthManagerBridg === void 0 ? UploadFileRequest.defaults.AuthManagerBridge : _ref$AuthManagerBridg;

    _classCallCheck(this, UploadFileRequest);

    _defineProperty(this, "http", null);

    _defineProperty(this, "data", null);

    //Set Variables
    this.url = url;
    this.file = file;
    this.onSuccess = onSuccess;
    this.onProgress = onProgress;
    this.onError = onError;
    this.authentication = authentication;
    this.AuthManagerBridge = AuthManagerBridge;
    this.formKey = formKey; //Initialize Request

    this.createRequest(); //Initialize Data To Send

    this.createData(); //Finaly Upload File

    this.uploadFile();
  } //Upload File


  _createClass(UploadFileRequest, [{
    key: "uploadFile",
    value: function uploadFile() {
      //Send Data
      this.http.open("POST", this.url, true);

      if (this.authentication) {
        var authObj = this.AuthManagerBridge.getAuthHeaderProperty();
        this.http.setRequestHeader(authObj.key, authObj.value);
      }

      this.http.send(this.data);
    } //Create XMLHttpRequest Object

  }, {
    key: "createRequest",
    value: function createRequest() {
      this.http = new XMLHttpRequest(); //add authenthication header

      this.registerOnReadyStateChange();
      this.registerOnProgressUplaod();
    } //Create FormData Object

  }, {
    key: "createData",
    value: function createData() {
      this.data = new FormData();
      this.data.append(this.formKey, this.file);
    } //Listen For Request State Change

  }, {
    key: "registerOnReadyStateChange",
    value: function registerOnReadyStateChange() {
      var _this = this;

      this.http.onreadystatechange = function () {
        //On Success
        if (_this.http.readyState == 4 && _this.http.status == 200) {
          _this.registerOnSuccessRequest();
        } else if (_this.http.readyState == 4 && _this.http.status != 200) {
          _this.registerOnErrorRequest();
        }
      };
    } //On Success Request Response

  }, {
    key: "registerOnSuccessRequest",
    value: function registerOnSuccessRequest() {
      //If Response Type is Json
      if (this.http.getResponseHeader("Content-Type").indexOf('json')) {
        this.onSuccess(JSON.parse(this.http.responseText));
      }
    } //On Error Request Response

  }, {
    key: "registerOnErrorRequest",
    value: function registerOnErrorRequest() {
      //If Response Type is Json
      if (this.http.getResponseHeader("Content-Type").indexOf('json')) {
        this.onError(JSON.parse(this.http.responseText));
      }
    } //File Upload Progess Percentage

  }, {
    key: "registerOnProgressUplaod",
    value: function registerOnProgressUplaod() {
      var _this2 = this;

      this.http.upload.addEventListener("progress", function (e) {
        if (e.lengthComputable) {
          var percent = Math.round(e.loaded / e.total * 100);

          _this2.onProgress(percent, e.loaded, e.total, e);
        }
      }, false);
    }
  }]);

  return UploadFileRequest;
}();

UploadFileRequest.defaults = {
  AuthManagerBridge: undefined,
  formKey: undefined
};

export default UploadFileRequest;
