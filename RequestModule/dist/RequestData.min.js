import ExceptionHandler from 'jb-modules/ExceptionHandler/ExceptionHandler';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RequestData =
/*#__PURE__*/
function () {
  //the request we create
  //row object without coding that we send server
  //transformedData is a object we want to  send to server in stringyfy sendable shape
  //keep cache setting
  function RequestData(input) {
    _classCallCheck(this, RequestData);

    _defineProperty(this, "config", {
      url: null,
      method: 'POST',
      body: null,
      cache: 'defualt',
      auth: true,
      mode: RequestData.defaults.mode
    });

    _defineProperty(this, "request", new Object());

    _defineProperty(this, "body", null);

    _defineProperty(this, "transformedData", null);

    _defineProperty(this, "cacheSetting", 'defualt');

    _defineProperty(this, "requestParameter", {
      method: null,
      //mode: undefined,
      headers: null,
      body: null,
      AuthManagerBridge: RequestData.defaults.AuthManagerBridge
    });

    _defineProperty(this, "exceptionHandler", ExceptionHandler);

    if (typeof input == "string") {
      //the condition we get string in constructor mean its url with all defualt config
      this.config.url = input;
    } else if (_typeof(input) == "object") {
      //merge user config to module defualt config
      Object.assign(this.config, input);
    }

    if (!(typeof this.config.url == "string" && this.config.url.length > 0)) {
      //if we dont have valid url
      ExceptionHandler.newException('invalid url to create request');
    } //add request body to request


    this.addBody(); //finall step create request

    this.createRequest(); //set cache setting to request
    //  this.configCache();
  }

  _createClass(RequestData, [{
    key: "createRequest",
    value: function createRequest() {
      var url = this.config.url;

      if (this.config.method.toUpperCase() == 'GET') {
        //if we have get method we have to send our param via url
        if (this.body) {
          var query = this.objectToQueryString(this.body);
          url += '?' + query;
        }
      }

      if (this.config.method.toUpperCase() == 'DELETE') {
        if (this.body != null && this.body != undefined) {
          if (url.substr(url.length - 1) != '/') {
            url += '/';
          }

          url += this.body;
        }
      }

      this.initRequestParameter();
      this.request = new Request(url, this.requestParameter);
    }
  }, {
    key: "refresh",
    value: function refresh() {
      //we rebuild request base on system value use when we change auth setting and want to resend req
      this.createRequest();
    }
  }, {
    key: "initRequestParameter",
    value: function initRequestParameter() {
      var headerConfig = {
        'Content-Type': 'application/json;charset=UTF-8',
        'Accept': 'application/json, text/plain, */*'
      };
      this.requestParameter = {
        method: this.config.method,
        headers: new Headers(headerConfig)
      };

      if (this.config.mode) {
        this.requestParameter.mode = this.config.mode;
      } //TODO: do not re create header on auth true , just add it in a goodway


      if (this.config.auth) {
        var AuthObj = RequestData.defaults.AuthManagerBridge.getAuthHeaderProperty();
        headerConfig[AuthObj.key] = AuthObj.value;
      }

      if (this.config.method.toUpperCase() == 'POST' || this.config.method.toUpperCase() == 'PUT') {
        this.requestParameter.body = this.transformedData ? this.transformedData : this.body;
      }

      this.requestParameter.headers = new Headers(headerConfig);
    }
  }, {
    key: "configCache",
    value: function configCache() {
      switch (this.config.cache) {
        case 'defualt':
          this.cacheSetting = 'default';
          break;

        case false:
        case 'false':
          this.cacheSetting = 'no-cache';
          break;

        case true:
        case 'true':
          this.cacheSetting = 'force-cache';
          break;

        default:
          this.cacheSetting = this.config.cache;
      }
    }
  }, {
    key: "addBody",
    value: function addBody() {
      if (this.config.body != null) {
        this.body = this.config.body;

        if (_typeof(this.config.body) == "object") {
          this.transformedData = JSON.stringify(this.body);
        }
      }
    }
  }, {
    key: "objectToQueryString",
    value: function objectToQueryString(obj) {
      //turn object to query string
      var parts = [];

      for (var i in obj) {
        if (obj.hasOwnProperty(i)) {
          parts.push(encodeURIComponent(i) + "=" + encodeURIComponent(obj[i]));
        }
      }

      return parts.join("&");
    }
  }]);

  return RequestData;
}(); // define defualt and global config for all instances
//if value changed in program , all instance defualts will change


RequestData.defaults = {
  AuthManagerBridge: undefined,
  mode: undefined
};

export default RequestData;
