System.register([], function (exports, module) {
    'use strict';
    return {
        execute: function () {

            exports('fetchErrorHandler', fetchErrorHandler);

            function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }
            function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }
            function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
            function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
            var fetchResponseHandlerInstance = exports('fetchResponseHandler', function fetchResponseHandler(request) {
              var refreshToken = function refreshToken() {
                return new Promise(function (resolve, reject) {
                  fetchResponseHandler.defaults.AuthManagerBridge.refreshToken().then(function (response) {
                    request.refresh();
                    fetch(request.request).then(function (response) {
                      resolve(response);
                    }).catch(function (e) {
                      reject(e);
                    });
                  }).catch(function (e) {
                    fetchResponseHandlerInstance.defaults.AuthManagerBridge.logout();
                  });
                });
              };
              var handleExpiredToken = function handleExpiredToken(response) {
                return new Promise(function (resolve, reject) {
                  if (response.status == 401) {
                    console.log('token is refreshed in' + new Date());
                    refreshToken().then(function (responseOfRefreshedTokenRequest) {
                      response = responseOfRefreshedTokenRequest;
                      resolve(response);
                    }).catch(function (e) {
                      reject(e);
                    });
                  } else {
                    resolve(response);
                  }
                });
              };
              return function (response) {
                return new Promise(function (mainResolve, mainReject) {
                  var isExpiredTokenHandeled = handleExpiredToken(response);
                  Promise.all([isExpiredTokenHandeled]).then(function (_ref) {
                    var _ref2 = _slicedToArray(_ref, 1),
                        response = _ref2[0];
                    if (response.ok) {
                      var contentType = response.headers.get('content-type');
                      if (contentType && contentType.indexOf('application/json') !== -1) {
                        mainResolve(response.json());
                      } else {
                        if (contentType && contentType.indexOf("image/") !== -1) {
                          response.arrayBuffer().then(function (data) {
                            var base64 = btoa(new Uint8Array(data).reduce(function (data, byte) {
                              return data + String.fromCharCode(byte);
                            }, ''));
                            mainResolve("data:".concat(contentType, ";base64,") + base64);
                          });
                        } else {
                          mainResolve({});
                        }
                      }
                    } else {
                      if (response.status == 502) {
                        return mainReject({
                          errorMessage: 'خطای 502  ، سرور یا در حال به روز رسانی است یا دچار اشکال شده است'
                        });
                      }
                      debugger;
                      return response.json().then(function (e) {
                        mainReject(e);
                      });
                    }
                  });
                });
              };
            });
            fetchResponseHandlerInstance.defaults = {
              AuthManagerBridge: undefined
            };

            function fetchErrorHandler(data) {
              var showMessage = window.showMessage ? window.showMessage : null;
              if (!showMessage) {
                var showMessage = function showMessage(message) {
                  if (window) {
                    alert(message);
                  } else {
                    console.log(message);
                  }
                };
              }
              if (data.errorMessage) {
                showMessage(data.errorMessage, 'error', data);
                if (data.errors) {
                  for (var i in data.errors) {
                    showMessage(data.errors[i]);
                  }
                }
              } else {
                if (data.message) {
                  showMessage(data.message, 'error', data);
                }
              }
            }

        }
    };
});
